// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/attendance/attendance.proto

package attendance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AttendanceInfo_GetAttendanceInfo_FullMethodName = "/attendance.AttendanceInfo/GetAttendanceInfo"
)

// AttendanceInfoClient is the client API for AttendanceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanceInfoClient interface {
	GetAttendanceInfo(ctx context.Context, in *AttendanceRequest, opts ...grpc.CallOption) (*AttendanceResponse, error)
}

type attendanceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceInfoClient(cc grpc.ClientConnInterface) AttendanceInfoClient {
	return &attendanceInfoClient{cc}
}

func (c *attendanceInfoClient) GetAttendanceInfo(ctx context.Context, in *AttendanceRequest, opts ...grpc.CallOption) (*AttendanceResponse, error) {
	out := new(AttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanceInfo_GetAttendanceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceInfoServer is the server API for AttendanceInfo service.
// All implementations must embed UnimplementedAttendanceInfoServer
// for forward compatibility
type AttendanceInfoServer interface {
	GetAttendanceInfo(context.Context, *AttendanceRequest) (*AttendanceResponse, error)
	mustEmbedUnimplementedAttendanceInfoServer()
}

// UnimplementedAttendanceInfoServer must be embedded to have forward compatible implementations.
type UnimplementedAttendanceInfoServer struct {
}

func (UnimplementedAttendanceInfoServer) GetAttendanceInfo(context.Context, *AttendanceRequest) (*AttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceInfo not implemented")
}
func (UnimplementedAttendanceInfoServer) mustEmbedUnimplementedAttendanceInfoServer() {}

// UnsafeAttendanceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceInfoServer will
// result in compilation errors.
type UnsafeAttendanceInfoServer interface {
	mustEmbedUnimplementedAttendanceInfoServer()
}

func RegisterAttendanceInfoServer(s grpc.ServiceRegistrar, srv AttendanceInfoServer) {
	s.RegisterService(&AttendanceInfo_ServiceDesc, srv)
}

func _AttendanceInfo_GetAttendanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceInfoServer).GetAttendanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceInfo_GetAttendanceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceInfoServer).GetAttendanceInfo(ctx, req.(*AttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceInfo_ServiceDesc is the grpc.ServiceDesc for AttendanceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attendance.AttendanceInfo",
	HandlerType: (*AttendanceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttendanceInfo",
			Handler:    _AttendanceInfo_GetAttendanceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/attendance/attendance.proto",
}
