// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: proto/org/org.proto

package org

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrgService_InitOrganization_FullMethodName     = "/org.OrgService/InitOrganization"
	OrgService_OrgEmployee_FullMethodName          = "/org.OrgService/OrgEmployee"
	OrgService_GetOrgAttendanceConf_FullMethodName = "/org.OrgService/GetOrgAttendanceConf"
	OrgService_GetDepAttendanceConf_FullMethodName = "/org.OrgService/GetDepAttendanceConf"
	OrgService_GetOrgLeaveConf_FullMethodName      = "/org.OrgService/GetOrgLeaveConf"
)

// OrgServiceClient is the client API for OrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgServiceClient interface {
	InitOrganization(ctx context.Context, in *InitOrgRequest, opts ...grpc.CallOption) (*InitOrgResponse, error)
	OrgEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error)
	GetOrgAttendanceConf(ctx context.Context, in *OrgAttendanceRequest, opts ...grpc.CallOption) (*OrgAttendanceResponse, error)
	GetDepAttendanceConf(ctx context.Context, in *DepAttendanceRequest, opts ...grpc.CallOption) (*DepAttendanceResponse, error)
	GetOrgLeaveConf(ctx context.Context, in *OrgLeaveRequest, opts ...grpc.CallOption) (*OrgLeaveResponse, error)
}

type orgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgServiceClient(cc grpc.ClientConnInterface) OrgServiceClient {
	return &orgServiceClient{cc}
}

func (c *orgServiceClient) InitOrganization(ctx context.Context, in *InitOrgRequest, opts ...grpc.CallOption) (*InitOrgResponse, error) {
	out := new(InitOrgResponse)
	err := c.cc.Invoke(ctx, OrgService_InitOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) OrgEmployee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*EmployeeResponse, error) {
	out := new(EmployeeResponse)
	err := c.cc.Invoke(ctx, OrgService_OrgEmployee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgAttendanceConf(ctx context.Context, in *OrgAttendanceRequest, opts ...grpc.CallOption) (*OrgAttendanceResponse, error) {
	out := new(OrgAttendanceResponse)
	err := c.cc.Invoke(ctx, OrgService_GetOrgAttendanceConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetDepAttendanceConf(ctx context.Context, in *DepAttendanceRequest, opts ...grpc.CallOption) (*DepAttendanceResponse, error) {
	out := new(DepAttendanceResponse)
	err := c.cc.Invoke(ctx, OrgService_GetDepAttendanceConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) GetOrgLeaveConf(ctx context.Context, in *OrgLeaveRequest, opts ...grpc.CallOption) (*OrgLeaveResponse, error) {
	out := new(OrgLeaveResponse)
	err := c.cc.Invoke(ctx, OrgService_GetOrgLeaveConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServiceServer is the server API for OrgService service.
// All implementations must embed UnimplementedOrgServiceServer
// for forward compatibility
type OrgServiceServer interface {
	InitOrganization(context.Context, *InitOrgRequest) (*InitOrgResponse, error)
	OrgEmployee(context.Context, *EmployeeRequest) (*EmployeeResponse, error)
	GetOrgAttendanceConf(context.Context, *OrgAttendanceRequest) (*OrgAttendanceResponse, error)
	GetDepAttendanceConf(context.Context, *DepAttendanceRequest) (*DepAttendanceResponse, error)
	GetOrgLeaveConf(context.Context, *OrgLeaveRequest) (*OrgLeaveResponse, error)
	mustEmbedUnimplementedOrgServiceServer()
}

// UnimplementedOrgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrgServiceServer struct {
}

func (UnimplementedOrgServiceServer) InitOrganization(context.Context, *InitOrgRequest) (*InitOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOrganization not implemented")
}
func (UnimplementedOrgServiceServer) OrgEmployee(context.Context, *EmployeeRequest) (*EmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgEmployee not implemented")
}
func (UnimplementedOrgServiceServer) GetOrgAttendanceConf(context.Context, *OrgAttendanceRequest) (*OrgAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgAttendanceConf not implemented")
}
func (UnimplementedOrgServiceServer) GetDepAttendanceConf(context.Context, *DepAttendanceRequest) (*DepAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepAttendanceConf not implemented")
}
func (UnimplementedOrgServiceServer) GetOrgLeaveConf(context.Context, *OrgLeaveRequest) (*OrgLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgLeaveConf not implemented")
}
func (UnimplementedOrgServiceServer) mustEmbedUnimplementedOrgServiceServer() {}

// UnsafeOrgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServiceServer will
// result in compilation errors.
type UnsafeOrgServiceServer interface {
	mustEmbedUnimplementedOrgServiceServer()
}

func RegisterOrgServiceServer(s grpc.ServiceRegistrar, srv OrgServiceServer) {
	s.RegisterService(&OrgService_ServiceDesc, srv)
}

func _OrgService_InitOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).InitOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgService_InitOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).InitOrganization(ctx, req.(*InitOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_OrgEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).OrgEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgService_OrgEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).OrgEmployee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetOrgAttendanceConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetOrgAttendanceConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgService_GetOrgAttendanceConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetOrgAttendanceConf(ctx, req.(*OrgAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetDepAttendanceConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetDepAttendanceConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgService_GetDepAttendanceConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetDepAttendanceConf(ctx, req.(*DepAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_GetOrgLeaveConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).GetOrgLeaveConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgService_GetOrgLeaveConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).GetOrgLeaveConf(ctx, req.(*OrgLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgService_ServiceDesc is the grpc.ServiceDesc for OrgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.OrgService",
	HandlerType: (*OrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitOrganization",
			Handler:    _OrgService_InitOrganization_Handler,
		},
		{
			MethodName: "OrgEmployee",
			Handler:    _OrgService_OrgEmployee_Handler,
		},
		{
			MethodName: "GetOrgAttendanceConf",
			Handler:    _OrgService_GetOrgAttendanceConf_Handler,
		},
		{
			MethodName: "GetDepAttendanceConf",
			Handler:    _OrgService_GetDepAttendanceConf_Handler,
		},
		{
			MethodName: "GetOrgLeaveConf",
			Handler:    _OrgService_GetOrgLeaveConf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/org/org.proto",
}
