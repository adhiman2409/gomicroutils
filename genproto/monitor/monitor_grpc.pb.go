// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/monitor/monitor.proto

package monitor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonitorService_UpdateCheckInCheckoutStatus_FullMethodName = "/monitor.MonitorService/UpdateCheckInCheckoutStatus"
	MonitorService_Heartbeat_FullMethodName                   = "/monitor.MonitorService/Heartbeat"
	MonitorService_SendActivityLog_FullMethodName             = "/monitor.MonitorService/SendActivityLog"
	MonitorService_SendActivityLogBatch_FullMethodName        = "/monitor.MonitorService/SendActivityLogBatch"
	MonitorService_FetchMonitoringConfig_FullMethodName       = "/monitor.MonitorService/FetchMonitoringConfig"
	MonitorService_MonitorStream_FullMethodName               = "/monitor.MonitorService/MonitorStream"
)

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorServiceClient interface {
	UpdateCheckInCheckoutStatus(ctx context.Context, in *EmployeeCheckInCheckOutRequest, opts ...grpc.CallOption) (*EmployeeCheckInCheckOutResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	SendActivityLog(ctx context.Context, in *ActivityLogRequest, opts ...grpc.CallOption) (*ActivityLogResponse, error)
	SendActivityLogBatch(ctx context.Context, in *ActivityLogBatchRequest, opts ...grpc.CallOption) (*ActivityLogResponse, error)
	FetchMonitoringConfig(ctx context.Context, in *MonitoringConfigRequest, opts ...grpc.CallOption) (*MonitoringConfigResponse, error)
	// Bidirectional streaming for real-time commands and events
	MonitorStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error)
}

type monitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServiceClient(cc grpc.ClientConnInterface) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) UpdateCheckInCheckoutStatus(ctx context.Context, in *EmployeeCheckInCheckOutRequest, opts ...grpc.CallOption) (*EmployeeCheckInCheckOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeCheckInCheckOutResponse)
	err := c.cc.Invoke(ctx, MonitorService_UpdateCheckInCheckoutStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, MonitorService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) SendActivityLog(ctx context.Context, in *ActivityLogRequest, opts ...grpc.CallOption) (*ActivityLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityLogResponse)
	err := c.cc.Invoke(ctx, MonitorService_SendActivityLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) SendActivityLogBatch(ctx context.Context, in *ActivityLogBatchRequest, opts ...grpc.CallOption) (*ActivityLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityLogResponse)
	err := c.cc.Invoke(ctx, MonitorService_SendActivityLogBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) FetchMonitoringConfig(ctx context.Context, in *MonitoringConfigRequest, opts ...grpc.CallOption) (*MonitoringConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitoringConfigResponse)
	err := c.cc.Invoke(ctx, MonitorService_FetchMonitoringConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorServiceClient) MonitorStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MonitorService_ServiceDesc.Streams[0], MonitorService_MonitorStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitorService_MonitorStreamClient = grpc.BidiStreamingClient[ClientMessage, ServerMessage]

// MonitorServiceServer is the server API for MonitorService service.
// All implementations must embed UnimplementedMonitorServiceServer
// for forward compatibility.
type MonitorServiceServer interface {
	UpdateCheckInCheckoutStatus(context.Context, *EmployeeCheckInCheckOutRequest) (*EmployeeCheckInCheckOutResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	SendActivityLog(context.Context, *ActivityLogRequest) (*ActivityLogResponse, error)
	SendActivityLogBatch(context.Context, *ActivityLogBatchRequest) (*ActivityLogResponse, error)
	FetchMonitoringConfig(context.Context, *MonitoringConfigRequest) (*MonitoringConfigResponse, error)
	// Bidirectional streaming for real-time commands and events
	MonitorStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error
	mustEmbedUnimplementedMonitorServiceServer()
}

// UnimplementedMonitorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitorServiceServer struct{}

func (UnimplementedMonitorServiceServer) UpdateCheckInCheckoutStatus(context.Context, *EmployeeCheckInCheckOutRequest) (*EmployeeCheckInCheckOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheckInCheckoutStatus not implemented")
}
func (UnimplementedMonitorServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMonitorServiceServer) SendActivityLog(context.Context, *ActivityLogRequest) (*ActivityLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActivityLog not implemented")
}
func (UnimplementedMonitorServiceServer) SendActivityLogBatch(context.Context, *ActivityLogBatchRequest) (*ActivityLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActivityLogBatch not implemented")
}
func (UnimplementedMonitorServiceServer) FetchMonitoringConfig(context.Context, *MonitoringConfigRequest) (*MonitoringConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMonitoringConfig not implemented")
}
func (UnimplementedMonitorServiceServer) MonitorStream(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorStream not implemented")
}
func (UnimplementedMonitorServiceServer) mustEmbedUnimplementedMonitorServiceServer() {}
func (UnimplementedMonitorServiceServer) testEmbeddedByValue()                        {}

// UnsafeMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServiceServer will
// result in compilation errors.
type UnsafeMonitorServiceServer interface {
	mustEmbedUnimplementedMonitorServiceServer()
}

func RegisterMonitorServiceServer(s grpc.ServiceRegistrar, srv MonitorServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitorService_ServiceDesc, srv)
}

func _MonitorService_UpdateCheckInCheckoutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeCheckInCheckOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).UpdateCheckInCheckoutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitorService_UpdateCheckInCheckoutStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).UpdateCheckInCheckoutStatus(ctx, req.(*EmployeeCheckInCheckOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitorService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorService_SendActivityLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).SendActivityLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitorService_SendActivityLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).SendActivityLog(ctx, req.(*ActivityLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorService_SendActivityLogBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityLogBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).SendActivityLogBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitorService_SendActivityLogBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).SendActivityLogBatch(ctx, req.(*ActivityLogBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorService_FetchMonitoringConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).FetchMonitoringConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitorService_FetchMonitoringConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).FetchMonitoringConfig(ctx, req.(*MonitoringConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorService_MonitorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitorServiceServer).MonitorStream(&grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitorService_MonitorStreamServer = grpc.BidiStreamingServer[ClientMessage, ServerMessage]

// MonitorService_ServiceDesc is the grpc.ServiceDesc for MonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCheckInCheckoutStatus",
			Handler:    _MonitorService_UpdateCheckInCheckoutStatus_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _MonitorService_Heartbeat_Handler,
		},
		{
			MethodName: "SendActivityLog",
			Handler:    _MonitorService_SendActivityLog_Handler,
		},
		{
			MethodName: "SendActivityLogBatch",
			Handler:    _MonitorService_SendActivityLogBatch_Handler,
		},
		{
			MethodName: "FetchMonitoringConfig",
			Handler:    _MonitorService_FetchMonitoringConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorStream",
			Handler:       _MonitorService_MonitorStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/monitor/monitor.proto",
}
